import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/point2d/index.js
var require_point2d = __commonJS({
  "node_modules/point2d/index.js"(exports, module) {
    function Point(x, y) {
      this.x = x || 0;
      this.y = y || 0;
      Object.freeze(this);
    }
    Point.prototype.distance = function(point) {
      return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));
    };
    Point.prototype.manhattanDistance = function(point) {
      var scalePoint = this.sub(point).abs();
      return scalePoint.x + scalePoint.y;
    };
    Point.prototype.abs = function() {
      return new Point(Math.abs(this.x), Math.abs(this.y));
    };
    Point.prototype.equals = function(point) {
      return this.x === point.x && this.y === point.y;
    };
    Point.prototype.add = function(point) {
      return new Point(this.x + point.x, this.y + point.y);
    };
    Point.prototype.sub = function(point) {
      return new Point(this.x - point.x, this.y - point.y);
    };
    module.exports = Point;
  }
});

// node_modules/hexgrid/index.js
var require_hexgrid = __commonJS({
  "node_modules/hexgrid/index.js"(exports, module) {
    var Point = require_point2d();
    function Hexgrid(options) {
      options = options || {};
      this.size = options.size || 100;
      this.origin = options.origin || new Point();
      this._height = this.size * 2;
      this._width = Math.sqrt(3) / 2 * this._height;
      this._vertSpacing = 3 / 4 * this._height;
      this._horiSpacing = this._width;
      this._grid = {};
    }
    Hexgrid.prototype = {
      /**
       * Adds a hexagon to the grid. If the grid already has a hexagon there, it replaces the hexagon
       * @param {Hexcell} hexcell The new hexagon cell
       */
      add: function(hexcell) {
        var row = this._grid[hexcell.point.y];
        if (!row) {
          this._grid[hexcell.point.y] = {};
        }
        this._grid[hexcell.point.y][hexcell.point.x] = hexcell;
      },
      /**
       * Removes a hexcell at a point
       * @param {Point} point The point to remove the cell from
       */
      remove: function(point) {
        if (this._grid[point.y]) {
          delete this._grid[point.y][point.x];
        }
      },
      /**
       * Gets the hexcell at a point
       * @param {Point} point The point to get the cell at
       * @returns {Hexcell} The cell at this point
       */
      get: function(point) {
        if (!this.isEmpty(point)) {
          return this._grid[point.y][point.x];
        }
      },
      /**
       * Gets the center of the hexcell as a Cartesian point.
       * Translates the hexcell's axial coordinate system point to Cartesian.
       * @param {Point} hexcell The point of the hexcell
       * @returns {Point} The center of the hexcell
       */
      getXY: function(point) {
        var x = point.x * this._horiSpacing + point.y * this._horiSpacing * 0.5;
        x += this.origin.x - this._width * 0.5;
        var y = point.y * this._vertSpacing;
        y += this.origin.y - this._height * 0.5;
        var xy = new Point(x, y);
        return xy;
      },
      /**
       * Returns true if the grid is empty at the given point
       * @param {Point} point The point to check
       * @returns {Boolean} True if the cell is empty
       */
      isEmpty: function(point) {
        var row = this._grid[point.y];
        return !row || !row[point.x];
      },
      /**
       * Gets all the hexcells in an array
       * @returns {Hexcell[]} An array of hexcells
       */
      getHexcells: function() {
        var cells = [];
        for (var rowIndex in this._grid) {
          var row = this._grid[rowIndex];
          for (var columnIndex in row) {
            var column = this._grid[rowIndex][columnIndex];
            cells.push(column);
          }
        }
        return cells;
      }
    };
    module.exports = Hexgrid;
  }
});
export default require_hexgrid();
//# sourceMappingURL=hexgrid.js.map
